1.找出应用中可能需要变化之处,把它们独立出来,不要和那些不需要变化的代码混在一起.
把会变化的部分取出并"封装"起来,好让其它部分不会受到影响.
这样的话,代码变化引起的不经意后果变少,系统变得更有弹性.

在观察者模式中,会改变的是主题的状态,以及观察者数目和类型.
用观察者模式,你可以改变依赖于主题状态的对象,却不必改变主题.


2.针对接口编程,而不是针对实现编程.
(明确地说,就是变量的声明类型应该是超类型)

观察模式中,主题与观察者都使用接口,观察者利用主题的接口向主题注册,而主题利用观察者接口通知观察者.
这样可以让两者之间动作正常,同时又具有松耦合的优点.

3.多用组合,少用继承

观察者模式利用组合将许多观察者组合进主题中.
对象之间的这种关系不是通过继承产生的,而是在运行时利用组合的方式而产生的.

4.为了交互对象之间的松耦合设计而努力.
eg.观察者模式:只要主题与观察者之间的接口仍被遵守,其中一方的改变不会影响另一方.

5.类应该对扩展开放,对修改关闭
我们的目标是在允许类容易扩展,在不修改现有代码的情况下,就可搭配新的行为.






